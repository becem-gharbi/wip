generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String   @id @default(cuid())
  name                   String
  email                  String   @unique
  picture                String
  role                   String   @default("user")
  provider               String   @default("default")
  password               String?
  verified               Boolean  @default(false)
  suspended              Boolean  @default(false)
  requestedPasswordReset Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  refreshTokens RefreshToken[]
  projects      Project[]
  teams         Team[]
  messages      Message[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  uid       String
  userId    String
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  ownerId     String

  owner  User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  team   Team?
  issues Issue[]

  @@unique([ownerId, name])
}

model Team {
  id        String @id @default(cuid())
  projectId String @unique

  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users    User[]
  messages Message[]
}

model Issue {
  id          Int      @id @default(autoincrement())
  column      Int      @default(0)
  summary     String
  description String?
  labels      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  projectId   String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  teamId    String
  authorId  String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
}
